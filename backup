import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import Imputer

train = pd.read_csv('train.csv').drop('Id', axis=1)
test = pd.read_csv('test.csv').drop('Id', axis=1)
all_data = pd.concat([train.iloc[:,:79].copy(), 
                      test.iloc[:, :79], ignore_index=True)
all_data = pd.concat([train.iloc[:,:79].copy(), 
                      test.iloc[:, :79], ignore_index=False)
all_data = pd.concat([train.iloc[:,:79].copy(), 
                      test.iloc[:, :79], ignore_index = False)
all_data = pd.concat([train.iloc[:, :79], 
                      test.iloc[:, :79], ignore_index = True)
all_data = pd.concat([train.iloc[:, :79], 
                      test.iloc[:, :79]], ignore_index = True)
y_train = train['SalePrice']
print("There are {} NAs in the label '{}'".format(y_train.isnull().sum(), 'SalePrice'))
print("The skewness of the label '{0:s}' is: {1:0.5f}".
      format('SalePrice', y_train.skew()))
print("Get the log price")
y_train = np.log(y_train)
print("The skewness of the logged label '{0:s}' is: {1:0.5f}".
     format('logSalePrice', y_train.skew()))
# The distributio of logSalePrice is 
sns.distplot(y_train, axlabel='logSalePrice')
train_cormat = train.corr() 
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(train_cormat, vmax=0.8, square=True)
f.tight_layout()
# Correlation matrix only evaluate numeric variables
cols = train_cormat.nlargest(10, 'SalePrice')['SalePrice'].index
cm = np.corrcoef(train[cols].values.T)
cm2 = train[cols].corr()
# Heat map of features having top 10 correlations with SalePrice
cor_sort=train_cormat.sort_values(by='SalePrice', ascending = False).index
cm_max = train[cor_sort[0:10]].corr()
f, ax = plt.subplots(figsize=(8, 8))
sns.heatmap(cm_max, vmax=0.8, square=True, annot=True,fmt='.2f',
            annot_kws={'size':10})
f.tight_layout()
f, ax = plt.subplots(figsize=(8, 12))
sorted_train_cormat = train_cormat.sort_values(by='SalePrice', ascending = False)
sns.barplot(y='index', x='SalePrice', data=sorted_train_cormat.reset_index())
f.tight_layout()
sns.set()
f, ax = plt.subplots(figsize=(15, 15))
sns.pairplot(data=train[cor_sort[0:7]], size=2.5)
plt.show()
all_NAs = all_data.isnull().sum().rename('numbers').to_frame()
all_NAs['percent'] = all_NAs['numbers']/all_data.shape[0]*100
all_NAs = all_NAs.sort_values(by='percent', ascending=False)
f, ax = plt.subplots(figsize=(8, 12))
sns.barplot(x=all_NAs[all_NAs['percent']>0]['percent'], y=all_NAs[all_NAs['percent']>0].index)
plt.title('Missing values percent', fontsize=18)
f.tight_layout()
print("The Pool Quality vs Pool area")
all_data[all_data['PoolQC'].notnull() | all_data['PoolArea']>0][['PoolQC','PoolArea']]
all_data.groupby(['PoolQC'])['PoolArea'].mean()
all_data[all_data['PoolQC'].notnull() | all_data['PoolArea']>0][['PoolQC','PoolArea']]
all_data.loc[2420,'PoolQC'] = 'Ex'
all_data.loc[2503,'PoolQC'] = 'Ex'
all_data.loc[2599,'PoolQC'] ='Fa'
all_data.ix[all_data['PoolQC'].isnull(),'PoolQC']='None'
all_data.loc[(all_data.MiscFeature.isnull()) & (all_data.MiscVal!=0)][['MiscFeature','MiscVal']]
all_data.groupby(['MiscFeature'])['MiscVal'].mean()
all_data.loc[2549, 'MiscFeature'] = 'Othr'
all_data.ix[all_data['MiscFeature'].isnull(),'MiscFeature']='None'
# 2.2.3 'Alley' 
# Replace NA in Alley with 'None'
all_data.ix[all_data['Alley'].isnull(),'Alley']='None'
# 2.2.4 'Fence'
# Replace NA in Alley with 'None'
all_data.ix[all_data['Fence'].isnull(),'Fence']='None'
# 2.2.5 'FirelaceQu'
# a. samples: FireplaceQu == nan and Fireplaces > 0
all_data.loc[(all_data['FireplaceQu'].isnull()) & (all_data['Fireplaces']>0)].shape[0]
# b. samples: FireplaceQu != nan and Fireplaces ==0
all_data.loc[(all_data['FireplaceQu'].notnull()) & (all_data['Fireplaces']==0)].shape[0]
# Replace NA in Alley with 'None'
all_data.ix[all_data['FireplaceQu'].isnull(),'FireplaceQu']='None'
# 2.2.5 'LotFrontage' and 'LotArea'
all_data[['LotFrontage','LotArea']].isnull().sum()
all_data['LotFrontage'].hist(bins=50)
sns.lmplot(x='LotFrontage',y='LotArea', data=all_data)
plt.title("LotArea vs LotFrontage", fontsize=18)
# Fit a linear model between 'LotFrontage' and 'LotArea'
# and fill the NAs with the prnited values
lot_data = all_data[['LotFrontage','LotArea']].copy(deep=True)
lot_noNa = lot_data.loc[lot_data['LotFrontage'].notnull()]
lot_Na = lot_data.loc[lot_data['LotFrontage'].isnull()]
area = lot_noNa['LotArea'].values.reshape(-1,1)
frontage = lot_noNa['LotFrontage'].values.reshape(-1,1)
lot_regressor = LinearRegression()
lot_regressor.fit(area, frontage)
lot_data.insert(2, 'predict',lot_regressor.predict(lot_data['LotArea'].
values.reshape(-1,1)))
lot_data.insert(2, 'predict',lot_regressor.predict(lot_data['LotArea'].
                                                   values.reshape(-1,1)))
lot_data['LotFrontage']=lot_data['LotFrontage'].fillna(lot_data['predict'])
all_data['LotFrontage'] = lot_data['LotFrontage']
all_data['LotFrontage'].isnull().sum()
garage = ['GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond', 'GarageType',
          'GarageArea', 'GarageCars']
all_data[garage].isnull().sum()
all_data[(all_data['GarageType'].notnull()) & (all_data['GarageYrBlt'].
         isnull())][garage]
all_data.loc[2576, 'GarageType'] = 'None'
common_values = [all_data[x].value_counts().index[0] for x in garage]
common_values
all_data.loc[2126, garage[0:4]] = common_values[0:4]
all_data.loc[2126, garage]
bsmt = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType1',
       'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',
       'BsmtFullBath', 'BsmtHalfBath']
test = all_data[bsmt
]
bsmt = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 
       'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',
       'BsmtFullBath', 'BsmtHalfBath']
test = all_data[bsmt]
all_data[bsmt].isnull().sum()
bsmt_Nas = all_data[all_data[bsmt].isnull()]
bsmt_Nas = all_data[all_data[bsmt].isnull()].copy(deep=True)
bsmt_Nas = all_data[all_data[bsmt].isnull()][bsmt].copy(deep=True)
bsmt_Nas = all_data.ix[all_data[bsmt].isnull(), bsmt].copy(deep=True)
bsmt_Nas = all_data.ix[all_data[bsmt].isnull().any(), bsmt].copy(deep=True)
bsmt_Nas = all_data.ix[all_data[bsmt].any().isnull(), bsmt].copy(deep=True)
bsmt_Nas = all_data.ix[all_data[bsmt].any(isnull(), bsmt].copy(deep=True)
bsmt_Nas = all_data.ix[all_data[bsmt].isnull().values.any(), bsmt].copy(deep=True)
bsmt_Nas = all_data.ix[all_data[bsmt].values.any().isnull(), bsmt].copy(deep=True)
bsmt_Nas = all_data[all_data[bsmt].isnull().any(axis=1)][bsmt]
plt.plot(all_data['BsmtFinSF2'], all_data['BsmtFinType2'])
sns.lmplot(x=all_data['BsmtFinSF2'], y=all_data['BsmtFinType2'])
sns.lmplot(x='BsmtFinSF2', y='BsmtFinType2', data=all_data)
sns.distplot(all_data'BsmtFinType2', data=all_data)
sns.distplot(all_data['BsmtFinSF2'], hub=all_data['BsmtFinType2'])
sns.distplot(all_data['BsmtFinSF2'], hue=all_data['BsmtFinType2'])
sns.distplot(all_data['BsmtFinSF2'], color=all_data['BsmtFinType2'])
sns.pairplot(all_data['BsmtFinSF2'], all_data['BsmtFinType2'])
sns.jointplot(all_data['BsmtFinSF2'], all_data['BsmtFinType2'])
sns.barplot(y=all_data['BsmtFinSF2'], x=all_data['BsmtFinType2'])
all_data.loc[332, 'BsmtFinType2'] = 'ALQ'
sns.barplot(y=all_data['BsmtFinSF2'], x=all_data['BsmtFinType2'], hue=All_data['BsmtQual'])
sns.barplot(y=all_data['BsmtFinSF2'], x=all_data['BsmtFinType2'], hue=all_data['BsmtQual'])
sns.barplot(y=all_data['TotalBsmtSF'], x=all_data['BsmtQual'], hue=all_data['BsmtExposure'])
all_data.loc[948, 'BsmtExposure'] = 'No'
all_data.loc[948, 'BsmtExposure'] = 'Gd'
sns.distplot(all_data['BsmtCond'])
sns.barplot(all_data['BsmtCond'])
sns.barplot(x='BsmtCond', data=all_data)
sns.factorplot(x ='BsmtCond', data=all_data, kind='count')
sns.factorplot(x='BsmtCond', data=all_data, kind='count')
plt.title("Summary of BsmtCond")
all_data.loc[2040, 'BsmtCond']='TA'
all_data.loc[2185, 'BsmtCond']='TA'
sns.barplot(x='BsmtQual', y='BsmtUnfSF', data=all_data)
sns.factorplot(x='BsmtQual', data=all_data)
sns.factorplot(x='BsmtQual', data=all_data, kind='count')
all_data.loc[2217, 'BsmtQual'] = 'TA'
all_data.loc[2218, 'BsmtQual'] = 'TA'
sns.barplot(y=all_data['TotalBsmtSF'], x=all_data['BsmtQual'])
all_data.loc[948, 'BsmtExposure'] = 'TA'
all_data.loc[1487, 'BsmtExposure'] = 'Ex'
all_data.loc[2348, 'BsmtExposure'] = 'Fa'
all_data.loc[2524, 'BsmtCond']='TA'
all_data[['MasVnrType','MasVnrArea']].isnull().sum()
all_data[(all_data['MasVnrType'].isnull()) | (all_data['MasVnrArea'].isnull())]
all_data[(all_data['MasVnrType'].isnull()) 
        | (all_data['MasVnrArea'].isnull())][['MasVnrType','MasVnrArea']]
all_data.ix[bsmt_Nas[garage].isnull(),barage]='None'
all_data.ix[bsmt_Nas[garage].isnull(),bsmt]='None'
bsmt.ix[bsmt_Nas[bsmt].isnull(),bsmt]='None'
bsmt_Nas.ix[bsmt_Nas[bsmt].isnull(),bsmt]='None'
bsmt_Nas.fillna('None')
all_data.loc[[2210,2188], ['BsmtHalfBath', 'BsmtFullBath']]=0
all_data[bsmt].fillna('None')
all_data[bsmt].isnull().sum()
all_data[bsmt]
all_data.loc[2210, bsmt]
all_data.loc[2218, bsmt]
all_data.loc[2120, ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'BsmtTotalBsmtSF',
                    'BsmtFullBath','BsmtHalfBath']]=0
all_data.loc[2120, ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',
                    'BsmtFullBath','BsmtHalfBath']]=0
all_data[bsmt]=all_data[bsmt].fillna('None')
all_data[bsmt].isnull(0.sum()
)
all_data[bsmt].isnull().sum()
all_data[(all_data['MasVnrType'].isnull()) 
        | (all_data['MasVnrArea'].isnull())][['MasVnrType','MasVnrArea']]
sns.factorplot(x='MasVnrType', data=all_data, kind='count')
sns.barplot(x='MasVnrType', y='MasVnrArea', data=all_data)
sns.barplot(x='MasVnrType', y='MasVnrArea', data=all_data)
plt.title('MasVnrType vs MasVnrArea')
all_data.loc[2610, 'MasVnrType'] = 'BrkFace'
all_data['MasVnrType'] = all_data['MasVnrType'].fillna('None')
all_data['MasVnrArea'] = all_data['MasVnrArea'].fillna(0)
all_data[(all_data['MSSubClass'].isnull()) 
       | (all_data['MSZoning'].isnull())][['MSSubClass','MSZoning']]
sns.factorplot(x='MSZoning', data=all_data[all_data[MSSubClass]==20], kind='count')
sns.factorplot(x='MSZoning', data=all_data[all_data['MSSubClass']==20], kind='count')
sns.factorplot(x='MSZoning', data=all_data[all_data['MSSubClass']==20], kind='count')
plt.title('MSZoning distribution for MSSubClass = 20')
sns.factorplot(x='MSZoning', data=all_data[all_data['MSSubClass']==[20,30,70],
                                           hue='MSSubClass', kind='count')
sns.factorplot(x='MSZoning',hue='MSSubClass', data=all_data[all_data['MSSubClass']==[20,30,70],
                                           kind='count')
sns.factorplot(x='MSZoning',hue='MSSubClass', data=all_data[all_data['MSSubClass']==[20,30,70], kind='count')
sns.factorplot(x='MSZoning',hue='MSSubClass', data=all_data[all_data['MSSubClass']==[20,30,70]], kind='count')
sns.factorplot(x='MSZoning', data=all_data[all_data['MSSubClass']==[20,30,70]], kind='count')
test = all_data[all_data['MSSubClass']==[20,30,70]]
test = all_data[all_data['MSSubClass']==any([20,30,70])]
test = all_data[all_data['MSSubClass']==any([20,30,70])
]
test = all_data[all_data['MSSubClass']==any([20,30,70].any())]
test = all_data[all_data['MSSubClass']==[20,30,70].any()]
test = all_data[all_data['MSSubClass']==any.[20,30,70]]
test = all_data[all_data['MSSubClass'].any()==[20,30,70]]
test = all_data[all_data['MSSubClass'].isin([20,30,70])]
sns.factorplot(x='MSZoning', data=all_data[all_data['MSSubClass'].isin([20,30,70])],
               kind='count', hue='MSSubClass')
sns.factorplot(x='MSZoning', data=all_data[all_data['MSSubClass'].isin([20,30,70])],
                kind='count', hue='MSSubClass')
plt.title('MSZoning distribution for MSSubClass == 20, 30, 70')
all_data[(all_data['MSSubClass'].isnull()) 
        | (all_data['MSZoning'].isnull())][['MSSubClass','MSZoning']]
all_data.loc[1915, 'MSZonging'] = 'RM'
all_data.loc[2250, 'MSZoning'] = 'RM'
all_data.loc[[2216,2904],'MSZoning'] = 'RL'
all_data[(all_data['MSSubClass'].isnull()) 
        | (all_data['MSZoning'].isnull())][['MSSubClass','MSZoning']]
all_data.loc[1915, 'MSZoning'] = 'RM'
all_data['MSZoning','MSSubClass'].isnull().sum()
all_data['MSZoning','MSSubClass']
all_data[['MSZoning','MSSubClass']].isnull().sum()
runfile('/home/xinyang3721/Boston_House_Price/feature_engineering.py', wdir='/home/xinyang3721/Boston_House_Price')
runfile('/home/xinyang3721/Boston_House_Price/untitled2.py', wdir='/home/xinyang3721/Boston_House_Price')